package com.ehcachedemo.pojo;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import org.hibernate.annotations.*;

@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Entity
@NamedQueries({
@NamedQuery(
    name="findAllServersById",
    query="SELECT server FROM Server server WHERE server.id = :id"),
@NamedQuery(
	    name="deleteServerByName",
	    query="DELETE FROM Server server WHERE server.id = :id"),
@NamedQuery(
		name="countServes",
		query="SELECT COUNT(s.id) FROM Server s")
})
public class Server {
	/* Surrogate Key - automatically generated by DB. */ 
	@GeneratedValue(strategy=GenerationType.IDENTITY) 
	@Id
	private int pk;
	
	// Note. I renamed the original Id to serverId.
	private String id;
	
	private String name;

	public Server() {}
	
	public Server(String id, String name) {
		this.id = id;
		this.name = name;
	}
	
	public int getPk() {
		return pk;
	}
	
	public void setPk(int pk) {
		this.pk = pk;
	}
	
	public String getId() {
		return id;
	}
	
	public void setId(String id) {
		this.id = id;
	}
	
	public String getName() {
		return name;
	}
	
	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "Server [pk=" + pk + ", id=" + id + ", name=" + name + "]";
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + pk;
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof Server)) {
			return false;
		}
		Server other = (Server) obj;
		if (pk != other.pk) {
			return false;
		}
		return true;
	}
	
	/**
	 * Returns true if IDs are the same.
	 * @param server
	 * @return
	 */
	public boolean equalsId(Server otherServer){
		if (otherServer == null) {
			return false;
		}
		if (!id.equals(otherServer.id)) {
			return false;
		}
		return true;
	}
}
